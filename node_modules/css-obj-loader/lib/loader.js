const postcssjs = require('postcss-js');
const postcss = require('postcss');

function getType(obj) {
    return Object.prototype.toString
        .call(obj)
        .match(/^\[object (\w+)\]$/)[1]
        .toLowerCase();
}

function isClassSelector(selector) {
    return /^\.(?![.0-9])[-\w]+$/i.test(selector);
}

function camelCase(name) {
    return name
        .replace(/-([a-z])/g, ($0, $1) => $1.toUpperCase())
        .replace(/^[A-Z]/, $0 => $0.toLowerCase());
}

function transform(node) {
    return Object.keys(node).reduce((data, key) => {
        const val = node[key];
        if (getType(val) === 'object') {
            const newVal = transform(val);
            if (key.indexOf(',') < 0) {
                if (isClassSelector(key)) {
                    const name = camelCase(key.substring(1));
                    data[name] = Object.assign({}, data[name], newVal);
                }
            } else {
                key.split(/\s*,\s*/).forEach(k => {
                    if (isClassSelector(k)) {
                        const name = camelCase(k.substring(1));
                        data[name] = Object.assign({}, data[name], newVal);
                    }
                });
            }
        } else {
            data[key] = Array.isArray(val) ? val.pop() : val;
        }
        return data;
    }, {});
}

const stripImportant = postcss.plugin('strip-important', () => css => {
    css.walkDecls(decl => {
        if (decl.important) {
            decl.important = false;
        }
    });
});


module.exports = function getStyle(content) {
    if (this.cacheable) {
        this.cacheable();
    }
    const callback = this.async();
    const src = this.resourcePath;
    postcss([stripImportant]).process(content, { from: src, to: src, map: false })
        .then(result => {
            const warnings = result.warnings();
            if (warnings.length) {
                warnings.forEach(msg => this.emitWarning(msg.toString()));
            }
            return postcssjs.objectify(result.root);
        })
        .then(style => transform(style))
        .then(obj => `module.exports = ${JSON.stringify(obj, null, 2)}`)
        .then(str => callback(null, str))
        .catch(err => callback(err));
};
